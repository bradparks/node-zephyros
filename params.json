{"name":"Zephyros","tagline":"","body":"# Zephyros [![Build Status](https://travis-ci.org/danielepolencic/zephyros.png)](https://travis-ci.org/danielepolencic/zephryos)\r\nNode.js adapter for [Zephyros](https://github.com/sdegutis/zephyros).\r\n\r\n## Usage\r\nInclude `zephiros` in your script and you're ready to go!\r\n\r\n```node\r\nvar Zephyros = require('zephyros');\r\n\r\nvar z = new Zephyros();\r\n\r\nz.bind('t', ['Cmd', 'Shift']).clipboardContents().then(function(clipboard){\r\n  console.log(\"clipboard: \", clipboard);\r\n});\r\n```\r\n\r\n## API\r\n\r\n### Starting a chain\r\nThere are three types of methods that can initiate a new chain:\r\n\r\n**bind**  \r\n`bind( key<String>, modifier<Array> )`  \r\nListen to a particular key combination and fire the chain every time such\r\nshortcut is triggered.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift']).then(function(){\r\n  console.log('Hey, you pressed t+⌘⌃');\r\n});\r\n```\r\n\r\n**listen**  \r\n`listen( event<String> )`  \r\nListen to a particular event and fire the chain every time this event occurs.\r\nA comprehensive list of events is available [here](https://github.com/sdegutis/zephyros/blob/master/Docs/Protocol.md)\r\n\r\n```node\r\nz.listen('window_created').then(function(){\r\n  console.log('Hey, you created a new window!');\r\n});\r\n```\r\n\r\n**api**  \r\n`api()`  \r\nManually trigger a displsable chain of actions.\r\n\r\n```node\r\nz.api().then(function(){\r\n  console.log('Fired only once.');\r\n});\r\n```\r\n\r\nWhen a new chain is initialised, ypu can use the API to interact with Windows,\r\nApps, Screens and Ohter stuff.\r\n\r\n### Window\r\n**windowFocused**  \r\nReturn a window object with the id of the focused window.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift']).windowFocused().then(function(window){\r\n  console.log(window.id);\r\n});\r\n```\r\n\r\n**windowsVisible**  \r\nReturn an array containing a window object for each visible window.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift']).windowsVisible().then(function(windows){\r\n  window.forEach(console.log);\r\n});\r\n```\r\n\r\n**windows**  \r\nReturn an array containing a window object for all the windows.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift']).windows().then(function(windows){\r\n  window.forEach(console.log);\r\n});\r\n```\r\n\r\n**windowTitle**  \r\nReturn a window object with the `id` of the window and the `title`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.windowFocused()\r\n.windowTitle()\r\n.then(function(window){\r\n  console.log(window.title);\r\n});\r\n```\r\n\r\n**getWindowFrame**  \r\nReturn a window object with the `id` of the window and the `frame`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.windowFocused()\r\n.getWindowFrame()\r\n.then(function(window){\r\n  console.log(window.frame); // {x: 0, y: 0, w: 200, h: 200}\r\n});\r\n```\r\n\r\n**setWindowFrame**  \r\nSet the window frame for the window identified by `id`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.windowFocused()\r\n.getWindowFrame()\r\n.setWindowFrame(function(window){\r\n  window.frame.w /= 2;\r\n  return window;\r\n});\r\n```\r\n\r\n**maximize**  \r\nMaximize the window identified by `id`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.windowFocused()\r\n.maximize();\r\n```\r\n\r\n**minimize**  \r\nMinimize the window identified by `id`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.windowFocused()\r\n.minimize();\r\n```\r\n\r\n**unminimize**  \r\nUnminimize the window identified by `id`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.windowFocused()\r\n.unminimize();\r\n```\r\n\r\n**windowFocus{up, down, right, left}**  \r\nFocus the window identified by `id` to the {right, left, up, down}.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.windowFocused()\r\n.windowFocusUp();\r\n```\r\n\r\n### Screen\r\n**screenFromWindow**  \r\nGet the screen object from the window identified by `id`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.windowFocused()\r\n.screenFromWindow()\r\n.then(function(screen){\r\n  console.log(screen); //{ id: 2 }\r\n});\r\n```\r\n\r\n**mainScreen**  \r\nGet the main screen object.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.mainScreen()\r\n.then(function(screen){\r\n  console.log(screen); //{ id: 1 }\r\n});\r\n```\r\n\r\n**frameIncludingDockAndMenu**  \r\nGet the frame including the dock and the menu for a screen identified by `id`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.mainScreen()\r\n.frameIncludingDockAndMenu()\r\n.then(function(screen){\r\n  console.log(screen.frame); //{ x: 0, y: 0, w: 100, h: 100 }\r\n});\r\n```\r\n\r\n**frameWithoutDockOrMenu**  \r\nGet the frame without the dock or menu for a screen identified by `id`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.mainScreen()\r\n.frameWithoutDockOrMenu()\r\n.then(function(screen){\r\n  console.log(screen.frame); //{ x: 0, y: 0, w: 80, h: 80 }\r\n});\r\n```\r\n\r\n**screens**  \r\nReturn an array containing a screen object for all the screens available.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.screens()\r\n.then(function(screens){\r\n  screens.forEach(console.log);\r\n});\r\n```\r\n\r\n### App\r\n**getAppFromWindow**  \r\nGet the app object from the window identified by `id`.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.windowFocused()\r\n.appFromWindow()\r\n.then(function(app){\r\n  console.log(app); //{ id: 1 }\r\n});\r\n```\r\n\r\n**apps**  \r\nReturn an array containing an app object for all the apps available.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.apps()\r\n.then(function(screens){\r\n  screens.forEach(console.log);\r\n});\r\n```\r\n\r\n### Util\r\n**clipboardContents**  \r\nReturn a string with the content of the clipboard\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift'])\r\n.clipboardContents()\r\n.then(function(clipboard){\r\n  console.log(clipboard); // Zephyros\r\n});\r\n```\r\n\r\n**updateSettings**  \r\nTrigger an update for Zephyros settings.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift']).updateSettings();\r\n```\r\n\r\n**reloadConfig**  \r\nForce a reload of the config file.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift']).reloadConfig();\r\n```\r\n\r\n**alert**  \r\nPrompt an alter.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift']).alert({message: 'Hello'});\r\nz.bind('t', ['Cmd', 'Shift']).alert('Hello'); // as above\r\nz.bind('t', ['Cmd', 'Shift']).alert(function(){\r\n  return { message: 'Hello World', duration: 3 };\r\n}); // as above\r\n```\r\n\r\n**log**  \r\nLog a string.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift']).log({message: 'Log'});\r\nz.bind('t', ['Cmd', 'Shift']).log('Hello'); // as above\r\nz.bind('t', ['Cmd', 'Shift']).alert(function(){\r\n  return 'Log';\r\n}); // as above\r\n```\r\n\r\n**chooseFrom**  \r\nChoose a list of items from a dinamically populated popup.\r\n\r\n```node\r\nz.bind('t', ['Cmd', 'Shift']).chooseFrom({\r\n  list: ['Banana', 'Pineapple', 'Orange'],\r\n  title: 'Fruits',\r\n  lines_tall: 10,\r\n  chars_wide: 30\r\n}).then(function(selected){\r\n  console.log(selected); // index of the array\r\n});\r\n```\r\n\r\n## Tests\r\nTests are written in [Mocha](http://visionmedia.github.io/mocha/). Simply run\r\nthe test with:\r\n\r\n    ~$ mocha\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}